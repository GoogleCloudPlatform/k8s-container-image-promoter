# Although the test framework allows for multiple test cases, we can test quite
# a lot with just 1 test case. This is because we can do N mutations in a single
# test case.
- name: "basic"
  # Repositories listed here are WIPED before the test as part of test setup!
  repositories:
  # Staging.
  - name: gcr.io/k8s-gcr-audit-test-prod
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  # Prod.
  - name: us.gcr.io/k8s-gcr-audit-test-prod
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  # This is the path to the manifests on local disk that the auditor image
  # should be pointed to when it is deployed to Cloud Run as part of the E2E
  # test. We build 1 cip-auditor-test image, but we re-deploy it for each test
  # case, passing in this manifestDir argument each time (to make it point to
  # the correct set of manifests).
  manifestDir: "/e2e-fixtures/basic"
  # This is used to set up the GCR state before the auditor is turned on. The
  # main reason is because the promoter itself is very good at copying things
  # from A to B in a declarative manner. This is arguably more elegant (and
  # faster, as the promoter works in parallel) than writing N serial copy
  # commands using either gcloud or otherwise.
  #
  # This can be an empty list if we want to start out with an empty GCR state.
  setupCip: []
  # Commands to invoke for setting up the prod repository *before* the Cloud Run
  # application is started. This is useful because some tests will require that
  # we delete an *already-existing* image.
  setupExtra: []
  mutations:
  # "Promote" an image by copying it in manually to production.
  - - "gcloud"
    - "--quiet"
    - "container"
    - "images"
    - "add-tag"
    - "gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar@sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929"
    - "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar:1.0"
  # Bad image push (2.0 tag is not in manifest).
  - - "gcloud"
    - "--quiet"
    - "container"
    - "images"
    - "add-tag"
    - "gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar@sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929"
    - "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar:2.0"
  logMatch:
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar@sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929", PQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar:1.0", Path: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar", Digest: "sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929", Tag: "1.0"}: agrees with manifest'
  - 'TRANSACTION REJECTED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar@sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929", PQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar:2.0", Path: "us.gcr.io/k8s-gcr-audit-test-prod/golden-bar/bar", Digest: "sha256:610b1ef6fec876146dee2b2846c890b566d26f235d7ea8982056a3e84bd35929", Tag: "2.0"}: could not validate'
- name: "fatManifest"
  repositories:
  # Staging.
  - name: gcr.io/k8s-gcr-audit-test-prod
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  # Prod.
  - name: us.gcr.io/k8s-gcr-audit-test-prod
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  manifestDir: "/e2e-fixtures/fatManifest"
  # This is used to set up the GCR state before the auditor is turned on. The
  # main reason is because the promoter itself is very good at copying things
  # from A to B in a declarative manner. This is arguably more elegant (and
  # faster, as the promoter works in parallel) than writing N serial copy
  # commands using either gcloud or otherwise.
  #
  # This can be an empty list if we want to start out with an empty GCR state.
  setupCip: []
  # Commands to invoke for setting up the prod repository *before* the Cloud Run
  # application is started. This is useful because some tests will require that
  # we delete an *already-existing* image.
  setupExtra: []
  mutations:
  # Create a fat manifest. Because of the way Docker repositories work, the
  # creation of a parent image (the fat manifest) forces the child images to be
  # copied over first.
  - - "gcloud"
    - "--quiet"
    - "container"
    - "images"
    - "add-tag"
    - "gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo@sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7"
    - "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo:1.0"
  logMatch:
  # There should be 2 child images that were copied over as a result of copying
  # the fat manifest.
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo@sha256:bfd18f1f0ca4264b5d7a469b9a5f20d5943416c06b95b8ff15191142455da16d", PQIN: "", Path: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo", Digest: "sha256:bfd18f1f0ca4264b5d7a469b9a5f20d5943416c06b95b8ff15191142455da16d", Tag: ""}: agrees with manifest (parent digest sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7)'
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo@sha256:1c229946cd2b51215732070f9b1ddc60eee6f77f55fabd8a533f118c8b800c07", PQIN: "", Path: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo", Digest: "sha256:1c229946cd2b51215732070f9b1ddc60eee6f77f55fabd8a533f118c8b800c07", Tag: ""}: agrees with manifest (parent digest sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7)'
  # Finally, the parent image itself should be verified.
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo@sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7", PQIN: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo:1.0", Path: "us.gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo", Digest: "sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7", Tag: "1.0"}: agrees with manifest'
# The main difference versus the plain "fatManifest" test is that the path
# prefix "golden-foo" is NOT SHARED between the staging and prod repos here.
- name: "fatManifest-subproject-different-prefix"
  repositories:
  # Staging.
  - name: gcr.io/k8s-gcr-audit-test-prod
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  # Prod.
  - name: us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo
    service-account: k8s-infra-gcr-promoter@k8s-gcr-audit-test-prod.iam.gserviceaccount.com
  manifestDir: "/e2e-fixtures/fatManifest-subproject-different-prefix"
  setupCip: []
  setupExtra:
  # Prepare the image to be stored in a more "subproject-y" location.
  - - "gcloud"
    - "--quiet"
    - "container"
    - "images"
    - "add-tag"
    - "gcr.io/k8s-gcr-audit-test-prod/golden-foo/foo@sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7"
    - "gcr.io/k8s-gcr-audit-test-prod/foo:1.0"
  mutations:
  # Perform a mutation to promote to the subproject's prefix "subproject-foo" in prod.
  - - "gcloud"
    - "--quiet"
    - "container"
    - "images"
    - "add-tag"
    - "gcr.io/k8s-gcr-audit-test-prod/foo@sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7"
    - "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo:1.0"
  logMatch:
  # There should be 2 child images that were copied over as a result of copying
  # the fat manifest.
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo@sha256:bfd18f1f0ca4264b5d7a469b9a5f20d5943416c06b95b8ff15191142455da16d", PQIN: "", Path: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo", Digest: "sha256:bfd18f1f0ca4264b5d7a469b9a5f20d5943416c06b95b8ff15191142455da16d", Tag: ""}: agrees with manifest (parent digest sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7)'
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo@sha256:1c229946cd2b51215732070f9b1ddc60eee6f77f55fabd8a533f118c8b800c07", PQIN: "", Path: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo", Digest: "sha256:1c229946cd2b51215732070f9b1ddc60eee6f77f55fabd8a533f118c8b800c07", Tag: ""}: agrees with manifest (parent digest sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7)'
  # Finally, the parent image itself should be verified.
  - 'TRANSACTION VERIFIED: {Action: "INSERT", FQIN: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo@sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7", PQIN: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo:1.0", Path: "us.gcr.io/k8s-gcr-audit-test-prod/subproject-foo/foo", Digest: "sha256:c8106c37d689ab8f92bc2dec760ebe5128579110badb826dd9971f8ccd9ce3c7", Tag: "1.0"}: agrees with manifest'
